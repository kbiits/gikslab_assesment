// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package repoActivity

import (
	"context"
	"time"
)

const addActivity = `-- name: AddActivity :exec
INSERT INTO activities (title, description, start_date, end_date, participants, skill_id) VALUES($1, $2, $3, $4, $5, $6)
`

type AddActivityParams struct {
	Title        string
	Description  string
	StartDate    time.Time
	EndDate      time.Time
	Participants string
	SkillID      int64
}

func (q *Queries) AddActivity(ctx context.Context, arg AddActivityParams) error {
	_, err := q.db.ExecContext(ctx, addActivity,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Participants,
		arg.SkillID,
	)
	return err
}

const deleteActivity = `-- name: DeleteActivity :execrows
DELETE FROM activities WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteActivity, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const findActivityById = `-- name: FindActivityById :one
SELECT id, title, description, start_date, end_date, created_at, updated_at, participants, skill_id FROM activities WHERE id = $1
`

func (q *Queries) FindActivityById(ctx context.Context, id int64) (Activity, error) {
	row := q.db.QueryRowContext(ctx, findActivityById, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Participants,
		&i.SkillID,
	)
	return i, err
}

const listActivitiesBySkill = `-- name: ListActivitiesBySkill :many
SELECT id, title, description, start_date, end_date, created_at, updated_at, participants, skill_id FROM list_activities($1::int8, $2::varchar, $3::varchar, $4::int4, $5::int4)
`

type ListActivitiesBySkillParams struct {
	Skillid   int64
	Sortby    string
	Ordercol  string
	Limitval  int32
	Offsetval int32
}

func (q *Queries) ListActivitiesBySkill(ctx context.Context, arg ListActivitiesBySkillParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivitiesBySkill,
		arg.Skillid,
		arg.Sortby,
		arg.Ordercol,
		arg.Limitval,
		arg.Offsetval,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Participants,
			&i.SkillID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActivity = `-- name: UpdateActivity :exec
UPDATE activities SET (title, description, start_date, end_date, participants, skill_id) = ($1, $2, $3, $4, $5, $6) WHERE id = $7
`

type UpdateActivityParams struct {
	Title        string
	Description  string
	StartDate    time.Time
	EndDate      time.Time
	Participants string
	SkillID      int64
	ID           int64
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) error {
	_, err := q.db.ExecContext(ctx, updateActivity,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Participants,
		arg.SkillID,
		arg.ID,
	)
	return err
}
