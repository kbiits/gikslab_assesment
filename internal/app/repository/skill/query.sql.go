// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package repoSkill

import (
	"context"

	"github.com/lib/pq"
)

const addSkill = `-- name: AddSkill :exec
INSERT INTO skills (name) VALUES ($1)
`

func (q *Queries) AddSkill(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, addSkill, name)
	return err
}

const findSkillByMultipleIds = `-- name: FindSkillByMultipleIds :many
SELECT id, name FROM skills WHERE id = ANY($1::int8[])
`

func (q *Queries) FindSkillByMultipleIds(ctx context.Context, dollar_1 []int64) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, findSkillByMultipleIds, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findSkillByName = `-- name: FindSkillByName :one
SELECT id, name FROM skills s WHERE s.name = $1
`

func (q *Queries) FindSkillByName(ctx context.Context, name string) (Skill, error) {
	row := q.db.QueryRowContext(ctx, findSkillByName, name)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllSkills = `-- name: GetAllSkills :many
SELECT id, name FROM skills
`

func (q *Queries) GetAllSkills(ctx context.Context) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, getAllSkills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
